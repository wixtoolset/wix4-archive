//-------------------------------------------------------------------------------------------------
// <copyright file="MessageEventArgs.cs" company="Outercurve Foundation">
//   Copyright (c) 2004, Outercurve Foundation.
//   This software is released under Microsoft Reciprocal License (MS-RL).
//   The license and further copyright text can be found in the file
//   LICENSE.TXT at the root directory of the distribution.
// </copyright>
//-------------------------------------------------------------------------------------------------

namespace WixToolset.Data
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Resources;
    using System.Text;

    /// <summary>
    /// Event args for message events.
    /// </summary>
    public abstract class MessageEventArgs : EventArgs
    {
        private SourceLineNumber sourceLineNumbers;
        private int id;
        private string resourceName;
        private object[] messageArgs;
        private MessageLevel level;

        /// <summary>
        /// Creates a new MessageEventArgs.
        /// </summary>
        /// <param name="sourceLineNumbers">Source line numbers for the message.</param>
        /// <param name="id">Id for the message.</param>
        /// <param name="resourceName">Name of the resource.</param>
        /// <param name="messageArgs">Arguments for the format string.</param>
        protected MessageEventArgs(SourceLineNumber sourceLineNumbers, int id, string resourceName, params object[] messageArgs)
        {
            this.sourceLineNumbers = sourceLineNumbers;
            this.id = id;
            this.resourceName = resourceName;
            this.messageArgs = messageArgs;

            // Default to Nothing, since the default MessageEventArgs container
            // classes define a level, and only WixErrorEventArgs previously
            // determined that an error occured without throwing.
            this.level = MessageLevel.Nothing;
        }

        /// <summary>
        /// Gets the resource manager for this event args.
        /// </summary>
        /// <value>The resource manager for this event args.</value>
        public ResourceManager ResourceManager { get; protected set; }

        /// <summary>
        /// Gets the source line numbers.
        /// </summary>
        /// <value>The source line numbers.</value>
        public SourceLineNumber SourceLineNumbers
        {
            get { return this.sourceLineNumbers; }
        }

        /// <summary>
        /// Gets the Id for the message.
        /// </summary>
        /// <value>The Id for the message.</value>
        public int Id
        {
            get { return this.id; }
        }

        /// <summary>
        /// Gets the name of the resource.
        /// </summary>
        /// <value>The name of the resource.</value>
        public string ResourceName
        {
            get { return this.resourceName; }
        }

        /// <summary>
        /// Gets or sets the <see cref="MessageLevel"/> for the message.
        /// </summary>
        /// <value>The <see cref="MessageLevel"/> for the message.</value>
        /// <remarks>
        /// The <see cref="MessageHandler"/> may set the level differently
        /// depending on suppression and escalation of different message levels.
        /// Message handlers should check the level to determine if an error
        /// or other message level was raised.
        /// </remarks>
        public MessageLevel Level
        {
            get { return this.level; }
            set { this.level = value; }
        }

        /// <summary>
        /// Gets the arguments for the format string.
        /// </summary>
        /// <value>The arguments for the format string.</value>
        [SuppressMessage("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
        public object[] MessageArgs
        {
            get { return this.messageArgs; }
        }

        /// <summary>
        /// Creates a properly formatted message string.
        /// </summary>
        /// <param name="shortAppName">Optional short form of the application name that generated the message. Defaults to "WIX" if unspecified.</param>
        /// <param name="longAppName">Optional long form of the application name that generated the message. Defaults to "WIX" if unspecified. Will be overridden by the processed filename if one was provided.</param>
        /// <param name="overrideLevel">Optional override level of the message, as generated by MessageLevel(MessageEventArgs).</param>
        /// <returns>String containing the formatted message.</returns>
        public string GenerateMessageString(string shortAppName = null, string longAppName = null, MessageLevel overrideLevel = MessageLevel.Nothing)
        {
            MessageLevel messageLevel = MessageLevel.Nothing == overrideLevel ? this.Level : overrideLevel;

            List<string> fileNames = new List<string>();
            string errorFileName = String.IsNullOrEmpty(longAppName) ? "WIX" : longAppName;
            for (SourceLineNumber sln = this.SourceLineNumbers; null != sln; sln = sln.Parent)
            {
                if (String.IsNullOrEmpty(sln.FileName))
                {
                    continue;
                }
                else if (sln.LineNumber.HasValue)
                {
                    if (0 == fileNames.Count)
                    {
                        errorFileName = String.Format(CultureInfo.CurrentUICulture, WixDataStrings.Format_FirstLineNumber, sln.FileName, sln.LineNumber);
                    }

                    fileNames.Add(String.Format(CultureInfo.CurrentUICulture, WixDataStrings.Format_LineNumber, sln.FileName, sln.LineNumber));
                }
                else
                {
                    if (0 == fileNames.Count)
                    {
                        errorFileName = sln.FileName;
                    }

                    fileNames.Add(sln.FileName);
                }
            }

            string messageType = String.Empty;
            if (MessageLevel.Warning == messageLevel)
            {
                messageType = WixDataStrings.MessageType_Warning;
            }
            else if (MessageLevel.Error == messageLevel)
            {
                messageType = WixDataStrings.MessageType_Error;
            }

            StringBuilder messageBuilder = new StringBuilder();
            string message = String.Format(CultureInfo.InvariantCulture, this.ResourceManager.GetString(this.ResourceName), this.MessageArgs);
            if (MessageLevel.Information == messageLevel || MessageLevel.Verbose == messageLevel)
            {
                messageBuilder.AppendFormat(WixDataStrings.Format_InfoMessage, message);
            }
            else
            {
                messageBuilder.AppendFormat(WixDataStrings.Format_NonInfoMessage, errorFileName, messageType, String.IsNullOrEmpty(shortAppName) ? "WIX" : shortAppName, this.Id, message);
            }

            if (1 < fileNames.Count)
            {
                messageBuilder.AppendFormat(WixDataStrings.INF_SourceTrace, Environment.NewLine);
                foreach (string fileName in fileNames)
                {
                    messageBuilder.AppendFormat(WixDataStrings.INF_SourceTraceLocation, fileName, Environment.NewLine);
                }

                messageBuilder.Append(Environment.NewLine);
            }

            return messageBuilder.ToString();
        }
    }
}
