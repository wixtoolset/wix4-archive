<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelpMessage" xml:space="preserve">
    <value> usage: torch.exe [-?] [options] targetInput updatedInput -out outputFile [@responseFile]

   -a         admin image (generates source file information in the transform)
              (default with -ax)
   -ax &lt;path&gt; admin image with extraction of binaries
              (combination of -a and -x)
   -ext &lt;extension&gt;  extension assembly or "class, assembly"
   -nologo    skip printing logo information
   -notidy    do not delete temporary files (useful for debugging)
   -o[ut]     specify output file (default: write to current directory)
   -p         preserve unmodified content in the output
   -pedantic  show pedantic messages
   -serr &lt;L&gt;  suppress error when applying transform; see Error flags below
   -sw[N]     suppress all warnings or a specific message ID
              (example: -sw1011 -sw1012)
   -swall     suppress all warnings (deprecated)
   -t &lt;type&gt;  use default validation flags for the transform type
              (see Transform types below)
   -v         verbose output
   -val &lt;L&gt;   validation flags for the transform; see Validation flags below
   -wx[N]     treat all warnings or a specific message ID as an error
              (example: -wx1011 -wx1012)
   -wxall     treat all warnings as errors (deprecated)
   -x &lt;path&gt;  extract binaries to the specified path
   -xi        input WiX format instead of MSI format (.wixout or .wixpdb)
   -xo        output wixout instead of MST format
              (set by default if -xi is present)
   -? | -help this help information

Error flags:
   a          Ignore errors when adding an existing row
   b          Ignore errors when deleting a missing row
   c          Ignore errors when adding an existing table
   d          Ignore errors when deleting a missing table
   e          Ignore errors when modifying a missing row
   f          Ignore errors when changing the code page

Validation flags:
   g          UpgradeCode must match
   l          Language must match
   r          Product ID must match
   s          Check major version only
   t          Check major and minor versions
   u          Check major, minor, and upgrade versions
   v          Upgrade version &lt; target version
   w          Upgrade version &lt;= target version
   x          Upgrade version = target version
   y          Upgrade version &gt; target version
   z          Upgrade version &gt;= target version

Transform types:
   language   Default flags for a language transform
   instance   Default flags for an instance transform
   patch      Default flags for a patch transform

Environment variables:
   WIX_TEMP   overrides the temporary directory used for cab extraction, binary extraction, ...</value>
  </data>
  <data name="INF_TorchTempDirLocatedAt" xml:space="preserve">
    <value>Torch temporary directory located at '{0}'.</value>
  </data>
  <data name="INF_UnbinderTempDirLocatedAt" xml:space="preserve">
    <value>Unbinder temporary directory located at '{0}'.</value>
  </data>
  <data name="WAR_FailedToDeleteTempDir" xml:space="preserve">
    <value>Warning, failed to delete temporary directory: {0}</value>
  </data>
</root>